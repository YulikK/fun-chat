{"version":3,"file":"main-DElt7Ljv.js","sources":["../../app/utils/src.ts","../../app/utils/language.ts","../../app/components/base-components.ts","../../app/utils/type.ts","../../app/api/router.ts","../../app/components/tags.ts","../../app/components/header/header.ts","../../app/pages/404/404.ts","../../app/components/alert-stack/alert-stack.ts","../../app/utils/validation.ts","../../app/components/input/input.ts","../../app/components/button/button.ts","../../app/pages/auth/auth.ts","../../app/components/users-list/user/user.ts","../../app/components/chat/header/header.ts","../../app/utils/formatting.ts","../../app/components/chat/message/message.ts","../../app/components/chat/dialog/dialog.ts","../../app/components/chat/form/form.ts","../../app/components/chat/chat.ts","../../app/components/users-list/users-list.ts","../../app/pages/chat/chat.ts","../../app/pages/info/info.ts","../../app/components/alert-stack/alert/alert.ts","../../app/components/spinner/spinner.ts","../../app/utils/validation-response.ts","../../app/api/server/connection.ts","../../app/controller/controller-auth.ts","../../app/controller/controller-user.ts","../../app/utils/id-generator.ts","../../app/api/server/request/auth/login.ts","../../app/api/server/request/auth/logout.ts","../../app/api/server/request/user/active.ts","../../app/api/server/request/user/inactive.ts","../../app/api/server/request/message/send.ts","../../app/api/server/request/message/from-user.ts","../../app/api/server/request/message/read.ts","../../app/api/server/request/message/delete.ts","../../app/api/server/request/message/edit.ts","../../app/api/server/server-request.ts","../../app/api/server/response/auth/login-handler.ts","../../app/api/server/response/auth/logout-handler.ts","../../app/api/server/response/users/user-active-handler.ts","../../app/api/server/response/users/user-inactive-handler.ts","../../app/api/server/response/users/user-login-handler.ts","../../app/api/server/response/users/user-logout-handler.ts","../../app/api/server/response/message/msg-send-handler.ts","../../app/api/server/response/message/msg-from-user-handler.ts","../../app/api/server/response/message/msg-deliver-handler.ts","../../app/api/server/response/message/msg-read-handler.ts","../../app/api/server/response/message/msg-delete-handler.ts","../../app/api/server/response/message/msg-edit-handler.ts","../../app/api/server/server-response.ts","../../app/controller/controller-message.ts","../../app/controller/controller.ts","../../app/store/store.ts","../../app/components/footer/footer.ts","../../app.ts"],"sourcesContent":["const SRC = {\n  git: `img/git.png`,\n  gitHref: `https://github.com/YulikK`,\n  gitAlt: `GitHub`,\n  rs: `img/RS.png`,\n  rsAlt: `RS School`,\n  rsHref: `https://rs.school/js/`,\n  isEdit: `img/is-edit.png`,\n  altIsEdit: `is edit`,\n  user: `img/user.png`,\n  userAlt: `user`,\n  logo: `img/logo.png`,\n  logoAlt: `logo`,\n  spinner: `img/spinner.gif`,\n  spinnerAlt: `spinner`,\n  p404: `img/404.png`,\n  p404Alt: `404`\n}\n\nexport default SRC;\n","const TXT = {\n\n  name: `Name`,\n  password: `Password`,\n  find: `find...`,\n  login: `Login`,\n  logout: `Logout`,\n  year: `2024`,\n  myMsg: `You`,\n  infoTittle: `Dear friend!`,\n  infoDescription: `Welcome to Fun-Chat â€“ a web application for chatting with friends. Here, you can share photos, send voice messages, and exchange memes. Whether youâ€™re looking for lighthearted conversations or serious discussions, weâ€™ve got a place for everyone. Letâ€™s get started and create unforgettable moments together! ðŸŽ‰ðŸ“±ðŸ‘‹`,\n  message404: `Ups... 404 Page not found`,\n  messageEmptyUser: `Chose user for dialog`,\n  messageEmptyChat: `Start your dialog`,\n  messageNewMessage: `New message`,\n  messageBCError: `Child is not an instance of BaseComponent`,\n  messageServerDisconnect: `Lost connection with server`,\n}\n\nexport default TXT;\n","import TXT from \"../utils/language.ts\";\n\nexport type Props<T extends HTMLElement = HTMLElement> = Partial<\n  Omit<T, 'style' | 'dataset' | 'classList' | 'children' | 'tagName '>\n  > & {\n  type?: string;\n  src?: string;\n  alt?: string;\n  width?: number;\n  height?: number;\n  htmlFor?: T extends HTMLLabelElement ? string : never;\n  checked?: T extends HTMLInputElement ? boolean : never;\n  id?: string;\n  placeholder?: string;\n  value?: string | number;\n  tag: keyof HTMLElementTagNameMap;\n};\n\nexport type ElementProps<T extends HTMLElement = HTMLElement> = Omit<Props<T>, 'tag'>;\n\nexport class BaseComponent {\n  protected element: HTMLElement;\n\n  protected child: BaseComponent[] = [];\n\n  constructor(props: Props, ...child: BaseComponent[]) {\n    this.element = document.createElement(props.tag);\n    Object.assign(this.element, props);\n    if (child) {\n      this.appendChild(child);\n    }\n  }\n\n  public append(child: BaseComponent): void {\n      this.child.push(child);\n      this.element.append(child.getElement());\n  }\n\n  public appendChild(child: BaseComponent[]): void {\n    child.forEach((el) => {\n      if (el instanceof BaseComponent) {\n        this.append(el);\n      } else {\n        throw new Error(TXT.messageBCError);\n      }\n    });\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getChildren(): BaseComponent[] {\n    return this.child;\n  }\n\n  public destroy(): void {\n    this.destroyChild();\n    this.element.remove();\n  }\n\n  public clear(): void {\n    this.element.innerHTML = '';\n  }\n\n  public destroyChild(): void {\n    this.child.forEach(child => child.destroy());\n    this.child = [];\n  }\n\n  public clearChild(): void {\n    this.child = [];\n  }\n\n  public removeChild(child: BaseComponent): void {\n    this.child = this.child.filter(el => el !== child);\n    child.destroy();\n  }\n\n  public getValue(): string {\n    let value = '';\n    if (this.element instanceof HTMLInputElement) {\n      value = this.element.value.trim();\n    };\n    return value;\n  }\n\n  public setValue(value: string): void {\n    if (this.element instanceof HTMLInputElement) {\n      this.element.value = value;\n    };\n  }\n\n  public setElementSrc(src: string): void {\n    if (this.element instanceof HTMLImageElement) {\n      this.element.src = src;\n    }\n  }\n\n  public setText(text: string): void {\n    this.element.textContent = text;\n  }\n\n  public addListener(listener: keyof HTMLElementEventMap, callback: (event: Event) => void): void {\n    this.element.addEventListener(listener, callback);\n  }\n\n  public addClass(classNameClassName: string): void {\n    this.element.classList.add(classNameClassName);\n  }\n\n  public toggleClass(classSurname: string): void {\n    this.element.classList.toggle(classSurname);\n  }\n\n  public removeClass(className: string): void {\n    this.element.classList.remove(className);\n  }\n}\n","export type Callback = () => void;\n\nexport enum Navigation {\n  auth = 'auth',\n  info = 'info',\n  chat = 'chat',\n  page404 = '',\n}\n\nexport enum Fields {\n  name = 'name',\n  password = 'password',\n  search = 'search',\n}\n\nexport enum Status {\n  sended = 'sended',\n  delivered = 'delivered',\n  readed = 'readed',\n}\n\nexport const NEED_VALIDATE = [Fields.name, Fields.password];\n\nexport type ServerAnswer = {\n  id: string;\n  type: AppError | UserActions | MessageActions;\n  payload: {\n    error?: string,\n    user?: Auth | MessageFrom,\n    users?: User[],\n    message?: Message | MessageSend | MessageId,\n    messages?: Message[],\n  } | null;\n};\n\ntype MessageFrom = {\n  login: string\n}\n\nexport type serverAnswerError= {\n  id: string,\n  type: AppError.ERROR,\n  payload: {\n    error: string\n  },\n}\n\nexport type serverAnswerSuccess = {\n  id: string,\n  type: UserActions | MessageActions,\n  payload: {\n    user?: User,\n    users?: User[],\n    message?: Message,\n    messages?: Message[],\n  },\n}\n\nexport type User = {\n  login: string;\n  isLogined: boolean;\n};\n\nexport type Auth = {\n  login: string | null;\n  password: string | null;\n};\n\nexport type Message = {\n  id: string;\n  from: string;\n  to: string;\n  text: string;\n  datetime: number;\n  status: MessageStatus;\n};\n\nexport type MessageSend = {\n  to: string | null;\n  text: string;\n};\n\nexport type MessageId = {\n  id: string;\n};\n\nexport type MessageStatus = {\n  isDelivered: boolean;\n  isReaded: boolean;\n  isEdited: boolean;\n};\n\nexport const enum UserActions {\n  LOGIN = 'USER_LOGIN',\n  LOGOUT = 'USER_LOGOUT',\n  USER_ACTIVE = 'USER_ACTIVE',\n  USER_INACTIVE = 'USER_INACTIVE',\n  USER_EXTERNAL_LOGIN = 'USER_EXTERNAL_LOGIN',\n  USER_EXTERNAL_LOGOUT = 'USER_EXTERNAL_LOGOUT',\n}\n\nexport const enum MessageActions {\n  MSG_SEND = 'MSG_SEND',\n  MSG_FROM_USER = 'MSG_FROM_USER',\n  MSG_DELIVER = 'MSG_DELIVER',\n  MSG_READ = 'MSG_READ',\n  MSG_DELETE = 'MSG_DELETE',\n  MSG_EDIT = 'MSG_EDIT',\n}\n\nexport const enum AppError {\n  ERROR = 'ERROR',\n}","import type Controller from \"../controller/controller.ts\";\nimport type Store from \"../store/store.ts\";\nimport { Navigation } from \"../utils/type.ts\";\n\nconst needAuth = [Navigation.chat];\nconst needLogout = [Navigation.auth];\n\ntype NavigationCallback = (page: Navigation) => void\n\nexport function navigateTo(page: Navigation): void {\n  window.location.hash = page;\n}\n\nexport function navigateAfterLogin(): void {\n  const pageString = window.location.hash.slice(1);\n  const navPage = getNavigation(pageString);\n  if( navPage === Navigation.auth){\n    navigateTo(Navigation.chat);\n  }\n}\n\nexport function initializeRouter(onRouteChange: NavigationCallback, storeObj: Store, controller: Controller): void {\n  changePage(onRouteChange, storeObj, controller)\n\n  window.addEventListener('hashchange', () => {\n    changePage(onRouteChange, storeObj, controller);\n  });\n\n}\n\nfunction changePage(onRouteChange: NavigationCallback, store: Store, controller: Controller): void {\n  const isAuth = store.isAuth();\n  const pageString = window.location.hash.slice(1);\n  const navPage = getNavigation(pageString);\n\n  if (needLogout.includes(navPage)){\n    controller.ctrAuth.startLogout();\n  }\n\n  if (!isAuth && needAuth.includes(navPage)) {\n    navigateTo(Navigation.auth);\n    onRouteChange(Navigation.auth);\n  } else {\n    onRouteChange(navPage);\n  }\n}\n\nexport function getNavigation(pageString: string): Navigation {\n  const navigationValues = Object.values(Navigation);\n\n  const foundValue = navigationValues.find(value => value.toLowerCase() === pageString.toLowerCase());\n\n  if (foundValue) {\n    return foundValue;\n  }\n\n  return Navigation.page404;\n}\n","import type { ElementProps } from \"./base-components.ts\";\nimport { BaseComponent } from \"./base-components.ts\";\n\nexport const div = (props: ElementProps<HTMLDivElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'div' }, ...children);\n\nexport const aside = (props: ElementProps<HTMLBaseElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'aside' }, ...children);\n\nexport const article = (props: ElementProps<HTMLBaseElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'article' }, ...children);\n\nexport const h1 = (className: string, textContent: string, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ tag: 'h1', className, textContent }, ...children);\n\nexport const p = (className: string, textContent: string): BaseComponent =>\n  new BaseComponent({ tag: 'p', className, textContent });\n\nexport const img = ({ src = '', alt = '', className = '', width = 0, height = 0 }): BaseComponent =>\n  new BaseComponent({tag: 'img', className, src, alt, width, height });\n\nexport const a = (props: ElementProps<HTMLLinkElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'a' }, ...children);\n\nexport const span = (props: ElementProps<HTMLElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'span' }, ...children);\n\nexport const li = (className: string, onclick?:(evt: Event) => void, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({  tag: 'li', className, onclick }, ...children);\n\nexport const ul = (props: ElementProps<HTMLElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'ul' }, ...children)\n\nexport const nav = (props: ElementProps<HTMLElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'nav' }, ...children)\n\nexport const section = (props: ElementProps<HTMLElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'section' }, ...children)\n\nexport const form = (props: ElementProps<HTMLElement>, ...children: BaseComponent[]): BaseComponent =>\n  new BaseComponent({ ...props, tag: 'form' }, ...children)","import SRC from \"@/app/utils/src.ts\";\nimport TXT from \"@/app/utils/language.ts\";\nimport type Controller from \"@/app/controller/controller.ts\";\nimport { BaseComponent } from \"@/app/components/base-components.ts\";\nimport { Navigation } from \"@/app/utils/type.ts\";\nimport type { User } from \"@/app/utils/type.ts\";\nimport { navigateTo, getNavigation } from \"@/app/api/router.ts\";\nimport { li, a, ul, nav, div, img, p } from \"../tags.ts\";\nimport classes from \"./header.module.scss\";\n\nconst NEED_AUTH = [Navigation.chat];\nexport default class Header extends BaseComponent {\n\n  private controller: Controller| null = null;\n\n  private isAuth = false;\n\n  private active: Navigation = Navigation.chat;\n\n  private items: BaseComponent[] = [];\n\n  private userInfo: BaseComponent;\n\n  private navList: BaseComponent;\n\n  constructor() {\n    super({ tag: 'header' });\n    this.navList = this.getNavList();\n    this.userInfo = div({ className: classes.wrap });\n\n    this.navList.append(this.userInfo);\n    this.append(this.navList);\n  }\n\n  public setController(controller: Controller): void {\n    this.controller = controller;\n  }\n\n  public setActivePage(page: Navigation): void {\n    this.items.forEach(item => item.removeClass(classes.active!));\n    const item = this.items.find(el => el.getElement().dataset.data === page);\n    if (item) {\n      item.getElement().classList.add(classes.active!);\n    }\n  }\n\n  public changeAuth(isAuth: boolean, user?: User): void {\n    this.isAuth = isAuth;\n    this.items.forEach(item => {\n      this.updateNavItem(item);\n      this.updateUserInfo(user);\n    });\n  }\n\n  private updateNavItem(item: BaseComponent): void {\n    item.removeClass(classes.disable!);\n    const { data } = item.getElement().dataset;\n    if (data) {\n      const tittle = this.getTittle(data);\n      item.setText(tittle);\n    }\n\n    if (!this.isAuth && data && NEED_AUTH.includes(getNavigation(data))) {\n      item.getElement().classList.add(classes.disable!);\n    }\n  }\n\n  private updateUserInfo(user?: User): void {\n    this.userInfo.clear();\n    if (this.isAuth && user) {\n      this.userInfo.appendChild([\n        img({ src: SRC.user, alt: SRC.userAlt, className: classes.img, width: 24, height: 24 }),\n        p(classes.text!, user.login)\n      ]);\n    }\n  }\n\n  private getNavList(): BaseComponent {\n    const navMenu = nav({ className: classes.navbar });\n    const navList = ul({ className: classes['navbar-nav'] });\n    this.updateItemsArray();\n    navList.appendChild(this.items);\n    const logo = img({ src: SRC.logo, alt: SRC.logoAlt, className: classes.logo, width: 100, height: 35 });\n    navMenu.appendChild([logo, navList])\n    return navMenu;\n  }\n\n  private updateItemsArray(): void {\n    Object.entries(Navigation).forEach(([key, value]) => {\n      if (value && key) {\n        const needsAuth = !this.isAuth && NEED_AUTH.includes(value);\n        const newItems = this.getNavItem(this.getTittle(value), value, value === this.active, needsAuth);\n        this.items.push(newItems);\n      }\n    });\n  }\n\n  private getNavItem(tittle: string, data: string, active: boolean, disable: boolean): BaseComponent {\n    const items = li(`${classes['nav-item']}  ${active ? classes.active : ''} ${disable ? classes.disable : ''} `, this.onLinkClick,\n      a({ className: classes['nav-link'], textContent: tittle }));\n    items.getElement().dataset.data = data;\n    return items\n  }\n\n\n  private onLinkClick = (evt: Event): void => {\n    const item = evt.currentTarget;\n    if (item &&\n      item instanceof HTMLElement &&\n      !item.classList.contains(classes.active!) &&\n      !item.classList.contains(classes.disable!)) {\n      const newLink = item.dataset.data;\n      if (newLink) {\n        const navPage = getNavigation(newLink);\n        if (navPage === Navigation.auth && this.isAuth) {\n          this.logout();\n        } else {\n          navigateTo(navPage);\n          this.setActivePage(navPage);\n        }\n\n      }\n    }\n  }\n\n  private logout(): void {\n    if (this.controller) {\n      this.controller.ctrAuth.startLogout();\n    }\n  }\n\n  private getTittle(name: string): string {\n    let tittle = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    if (name === Navigation.auth.toString()) {\n      tittle = this.isAuth ? TXT.logout : TXT.login;\n    }\n    return tittle;\n  }\n\n\n}\n\n","import SRC from \"@/app/utils/src.ts\";\nimport TXT from \"@/app/utils/language.ts\";\nimport { BaseComponent } from \"../../components/base-components.ts\";\nimport { p, img } from \"../../components/tags.ts\";\nimport classes from \"./404.module.scss\";\n\n\nexport default class Page404 extends BaseComponent {\n  constructor() {\n    super({ tag: 'div', className: classes.container });\n    this.appendChild([p(classes.text!, TXT.message404),\n      img({ className: classes.img, src: SRC.p404, alt: SRC.p404Alt, width: 500 })\n    ]);\n  }\n}\n","import { BaseComponent } from \"../base-components.ts\";\nimport classes from \"./alert-stack.module.scss\";\n\nexport default class AlertStack extends BaseComponent {\n  constructor() {\n    super({ tag: 'div', className: classes.stack });\n  }\n}","\n\ntype Rule = (value: string) => string | null;\ntype RuleWithArgs<T> = (value: string, args: T) => string | null;\n\nconst message = {\n  minLength: 'Value is too short',\n  startsWithCapitalLetter: 'Value must start with a capital letter',\n  onlyLatinLetters: 'Value must contain only Latin letters',\n  hasLowerCase: 'Value must contain at least one lowercase letter',\n  hasUpperCase: 'Value must contain at least one uppercase letter',\n  hasNumberOrSpecialCharacter: 'Value must contain at least one number or special character',\n}\n\nexport default class Validation {\n  private rules: Rule[] = [];\n\n  constructor(rules: Rule[]) {\n    this.rules = rules;\n  }\n\n  public validate(value: string): string | null {\n    let errorMessage: string | null = null;\n    this.rules.forEach(rule => {\n      const result = rule(value);\n      if (!errorMessage && result) {\n        errorMessage = result;\n      }\n    });\n    return errorMessage;\n  }\n\n  public static minLengthRule: RuleWithArgs<number> = (value: string, minLength: number) => value.length >= minLength ? null : message.minLength;\n\n  public static minLengthRuleWrapper(minLength: number): Rule {\n    return (value: string) => Validation.minLengthRule(value, minLength);\n  }\n\n  public static startsWithCapitalLetterRule = (value: string): string | null =>\n    value.charAt(0) === value.charAt(0).toUpperCase() ? null : message.startsWithCapitalLetter;\n\n  public static onlyLatinLettersRule = (value: string): string | null =>\n    /^[a-zA-Z]+$/.test(value) ? null : message.onlyLatinLetters;\n\n  public static hasLowerCaseRule = (value: string): string | null =>\n    /[a-z]/.test(value) ? null : message.hasLowerCase;\n\n  public static hasUpperCaseRule = (value: string): string | null =>\n    /[A-Z]/.test(value) ? null : message.hasUpperCase;\n\n  public static hasNumberOrSpecialCharacterRule = (value: string): string | null =>\n    /\\d|[!@#$%^&*(),.?\":{}|<>]/.test(value) ? null : message.hasNumberOrSpecialCharacter;\n\n}\n","import type { Fields } from \"@/app/utils/type.ts\";\nimport type Validation from \"@/app/utils/validation.ts\";\nimport { BaseComponent } from '../base-components.ts';\nimport { p } from \"../tags.ts\";\nimport classes from './input.module.scss';\n\n\ninterface InputProps {\n  tag?: string;\n  id: Fields;\n  type: string;\n  placeholder?: string;\n  className?: string;\n  value?: string;\n  validation: Validation | undefined;\n  errorContainer?: BaseComponent;\n}\n\nexport default class Input extends BaseComponent{\n  private errorContainer: BaseComponent | null = null;\n\n  private errorsMsg: BaseComponent | null = null;\n\n  private id: Fields;\n\n  private validation: Validation | undefined;\n\n  constructor({ id, type, placeholder, className, errorContainer, validation, value=''}: InputProps) {\n    super({ tag: 'input', id, type, placeholder, className: `${classes.input} ${className || ''}`, value })\n\n    this.id = id;\n\n    this.validation = validation;\n    if (errorContainer) {\n      this.errorContainer = errorContainer;\n    }\n\n    this.element.addEventListener('change', this.onChange);\n  }\n\n  private onChange = (event: Event): void => {\n    if (this.validation) {\n      event.preventDefault();\n      this.validate();\n    }\n\n  }\n\n  public isValid(): boolean {\n    return this.validate();\n  }\n\n  private validate = (): boolean => {\n    const value = this.getValue();\n    let isValid = true;\n    if (this.validation) {\n      const message = this.validation.validate(value);\n      if (message) {\n        this.setError(`${this.id.toString()}: ${message}`);\n        isValid = false;\n      } else {\n        this.setSuccess();\n      }\n    }\n    return isValid;\n  }\n\n  private setError(error: string): void {\n    if (this.errorContainer && this.validation) {\n      this.errorContainer.getElement().innerHTML = '';\n      this.errorsMsg = p(classes.errorMessage!, error);\n      this.errorContainer.append(this.errorsMsg);\n      this.addClass(classes.error!);\n      this.removeClass(classes.success!);\n    }\n\n  }\n\n  private setSuccess(): void {\n    if (this.validation && this.errorContainer) {\n      this.errorContainer.getElement().innerHTML = '';\n    if (this.errorsMsg) {\n      this.errorsMsg.destroy();\n    }\n    this.addClass(classes.success!);\n    this.removeClass(classes.error!);\n    }\n\n  }\n}\n","import type { Callback } from '@/app/utils/type.ts';\nimport { BaseComponent } from '../base-components.ts';\n\nimport classes from './button.module.scss';\n\ninterface Props {\n  textContent: string;\n  onClick?: Callback;\n  className?: string;\n}\n\nconst Button = ({textContent, onClick, className }: Props):BaseComponent  =>\n  new BaseComponent({\n    tag: 'button',\n    className: `${classes.btn} ${className || ''}`,\n    textContent,\n    onclick: (PreventDefault: Event): void => {\n      PreventDefault.preventDefault();\n      onClick?.();\n    },\n  });\nexport default Button;","import TXT from \"@/app/utils/language.ts\";\nimport SRC from \"@/app/utils/src.ts\";\nimport Validation from \"@/app/utils/validation.ts\";\nimport { BaseComponent } from \"@/app/components/base-components.ts\";\nimport type Controller from \"@/app/controller/controller\";\nimport type { Auth } from \"@/app/utils/type.ts\";\nimport { Fields } from \"@/app/utils/type.ts\";\nimport { div, img, form } from \"@/app/components/tags.ts\";\nimport Input from \"@/app/components/input/input.ts\";\nimport Button from \"@/app/components/button/button.ts\";\nimport classes from \"./auth.module.scss\";\n\nexport const MIN_LENGTH_NAME = 3;\nexport const MIN_LENGTH_PASS = 4;\n\nexport default class AuthPage extends BaseComponent {\n  private controller: Controller | null = null;\n\n  private name: Input;\n\n  private password: Input;\n\n  private errorsContainer: BaseComponent;\n\n  private loginBtn: BaseComponent;\n\n  constructor() {\n    super({ tag: 'div', className: classes.container });\n    this.errorsContainer = div({ className: classes.errors });\n    this.name = new Input({ id: Fields.name, type: 'text', placeholder: TXT.name, errorContainer: this.errorsContainer, validation: getValidation(Fields.name)});\n    this.password = new Input({ id: Fields.password, type: 'password', placeholder: TXT.password, errorContainer: this.errorsContainer, validation: getValidation(Fields.password) });\n    this.loginBtn = Button({ textContent: TXT.login, className: classes.login });\n    this.addListener('submit', this.login);\n    this.loginBtn.addListener('click', this.login);\n\n    this.generateView();\n  }\n\n  public setController(controller: Controller): boolean {\n    let result = false;\n    if (controller) {\n      this.controller = controller;\n      result = true;\n    }\n    return result;\n\n  }\n\n  public resetForm(): void {\n    this.name.setValue('');\n    this.password.setValue('');\n  }\n\n  private generateView(): void {\n    const modal = form({ className: classes.form },\n      img({ className: classes.img, src: SRC.user, alt: SRC.userAlt, width: 40, height: 40 }),\n      div({ className: classes.inputWrapper },\n        this.name,\n        this.password),\n      this.errorsContainer,\n      this.loginBtn\n      );\n\n    this.append(modal)\n  }\n\n  private login = (): void => {\n    if (this.validateForm()) {\n      const user: Auth = {\n        login: this.name.getValue(),\n        password: this.password.getValue(),\n      }\n      if (this.controller !== null) {\n        this.controller.ctrAuth.login(user);\n      }\n    }\n  }\n\n  private validateForm = (): boolean =>  this.name.isValid() && this.password.isValid()\n\n\n}\n\nfunction getValidation(field: Fields): Validation | undefined {\n  switch (field) {\n    case Fields.name:\n      return new Validation([\n        Validation.minLengthRuleWrapper(MIN_LENGTH_NAME),\n        Validation.startsWithCapitalLetterRule,\n        Validation.onlyLatinLettersRule\n      ]);\n    case Fields.password:\n      return new Validation([\n        Validation.minLengthRuleWrapper(MIN_LENGTH_PASS),\n        Validation.hasLowerCaseRule,\n        Validation.hasUpperCaseRule,\n        Validation.hasNumberOrSpecialCharacterRule,\n      ]);\n    default:\n      return undefined;\n  }\n}\n","import SRC from \"@/app/utils/src.ts\";\nimport type { User } from \"@/app/utils/type.ts\";\nimport { BaseComponent } from \"../../base-components.ts\";\nimport classes from \"./user.module.scss\";\nimport { img, p, span } from \"../../tags.ts\";\n\nexport default class UserComponent extends BaseComponent{\n  private user: User;\n\n  private text: BaseComponent | null = null;\n\n  private badge: BaseComponent;\n\n  private status: boolean;\n\n  private newMsg = 0;\n\n  constructor(user: User) {\n    super({ tag: 'li', className: `${classes.user } ${user.isLogined ? classes.online! : ''}`});\n    this.user = user;\n    this.status = user.isLogined;\n    this.badge = span({ className: classes.badges, textContent: this.newMsg ? this.newMsg.toString() : '' });\n    this.text = p(classes.tittle!, this.user.login);\n    const userLogo = img({ src: SRC.user, alt: SRC.userAlt, className: classes.img, width: 20, height: 20 });\n    this.appendChild([userLogo, this.text, this.badge]);\n\n  }\n\n  public setMessageCount(count: number): void {\n    this.newMsg = count;\n    this.updateBadge();\n  }\n\n  private updateBadge(): void {\n    this.badge.setText(this.newMsg ? this.newMsg.toString() : '')\n  }\n\n  public setActive(status: boolean): void {\n    if (status) {\n      this.addClass(classes.active!);\n    } else {\n      this.removeClass(classes.active!);\n    }\n  }\n\n  public setOnline(status: boolean): void {\n    this.status = status;\n    if (status) {\n      this.toggleClass(classes.online!);\n    } else {\n      this.removeClass(classes.online!);\n    }\n  }\n\n  public getStatus(): boolean{\n    return this.status;\n  }\n\n  public getUser(): User {\n    return this.user;\n  }\n\n  public show(): User {\n    this.removeClass(classes.hide!);\n    return this.user;\n  }\n\n  public hide(): User {\n    this.addClass(classes.hide!);\n    return this.user;\n  }\n}\n","import type { User } from \"@/app/utils/type.ts\";\nimport UserComponent from \"../../users-list/user/user.ts\";\nimport { BaseComponent } from \"../../base-components.ts\";\nimport classes from \"./header.module.scss\";\n\nexport default class ChatHead extends BaseComponent {\n  private user: User;\n\n  private userComponent: UserComponent;\n\n  constructor(user: User) {\n    super({ tag: 'header', className: classes.head });\n    this.user = user;\n    this.userComponent = new UserComponent(this.user);\n    this.userComponent.addClass(classes.user!);\n    this.append(this.userComponent);\n  }\n\n  public updateStatus(status: boolean): void {\n    this.userComponent.setOnline(status);\n  }\n}","export default function getDateFormat(datetime: number): string {\n\n  const date = new Date(datetime);\n\n  const hours = date.getHours().toString().padStart(2, '0');\n  const minutes = date.getMinutes().toString().padStart(2, '0');\n\n  return `${hours}:${minutes}`;\n}\n\n","import TXT from '@/app/utils/language.ts';\nimport SRC from '@/app/utils/src.ts';\nimport { Status } from '@/app/utils/type.ts';\nimport type { Message, User } from '@/app/utils/type.ts';\nimport getDateFormat from '@/app/utils/formatting.ts';\nimport { BaseComponent } from '../../base-components.ts';\nimport classes from './message.module.scss';\nimport { a, div, img, p, span } from '../../tags.ts';\n\n\ntype messageCallback = (message: Message) => void;\n\nexport default class MessageComponent extends BaseComponent {\n  private message: Message;\n\n  private text: BaseComponent;\n\n  private time: BaseComponent;\n\n  private user: BaseComponent;\n\n  private editStatus: BaseComponent;\n\n  private btnEdit: BaseComponent;\n\n  private btnDelete: BaseComponent;\n\n  private isMy: boolean;\n\n  private deliverStatus: BaseComponent;\n\n  private isEdit = false;\n\n  private deleteCallback: messageCallback\n\n  private editCallback: messageCallback\n\n  constructor(message: Message, isMy: boolean, user: User, deleteCallback: messageCallback, editCallback: messageCallback) {\n    super({ tag: 'div', className: `${classes.message} ${isMy ? classes.right : classes.left}` });\n    this.message = message;\n    this.deleteCallback = deleteCallback;\n    this.editCallback = editCallback;\n    this.text = p(classes.text!, message.text);\n    this.time = span({ className: classes.time, textContent: getDateFormat(message.datetime) });\n    this.isMy = isMy;\n    this.user = span({ className: classes.user, textContent: `${this.isMy ? TXT.myMsg : user.login}` });\n    this.editStatus = img({className: `${classes.img} ${!this.message.status.isEdited ? classes.hide : ''}` , src: SRC.isEdit, alt: SRC.altIsEdit, width: 15, height: 15});\n    this.btnEdit = getBtn('edit');\n    this.btnDelete = getBtn('delete');\n    this.btnDelete.addListener('click', this.onDelete);\n    this.btnEdit.addListener('click', this.onEdit);\n    this.deliverStatus = this.getStatusComponent();\n\n    this.appendChild(this.getView());\n  }\n\n  public getMessage(): Message {\n    return this.message;\n  }\n\n  public updateMessage(message: Message): void {\n    this.message = message;\n    this.text.setText(message.text);\n    this.updateDeliverStatus();\n    this.updateEditStatus();\n  }\n\n  private updateDeliverStatus(): void {\n    const status = this.getStatus();\n    this.deliverStatus.setElementSrc(`img/${status}.png`);\n  }\n\n  private updateEditStatus(): void {\n    if (this.message.status.isEdited) {\n      this.editStatus.removeClass(classes.hide!);\n    }\n  }\n\n  private getStatusComponent(): BaseComponent {\n    const status = this.getStatus();\n    return img({className: classes.img, src: `img/${status}.png`, alt: status, width: 15, height: 15});\n  }\n\n  private getStatus(): Status {\n    let status = Status.sended;\n    status = this.message.status.isDelivered ? Status.delivered : status;\n    status = this.message.status.isReaded ? Status.readed : status;\n    return status;;\n  }\n\n  private getView(): BaseComponent[] {\n    const controls = div({ className: classes.controls });\n    controls.append(div({ className: classes.wrap },\n      this.user,\n      this.editStatus))\n    if (this.isMy) {\n      controls.append(div({ className: classes.wrap },\n        this.btnEdit,\n        this.btnDelete))\n    }\n    const info = div({ className: classes.info })\n    info.append(this.time);\n    if (this.isMy) {\n      info.append(this.deliverStatus);\n    }\n    return [\n      controls,\n      this.text,\n      info\n    ]\n  }\n\n  private onDelete = (): void => {\n    this.deleteCallback(this.message);\n  }\n\n  private onEdit = (): void => {\n    this.addClass(classes.edit!)\n    this.editCallback(this.message);\n  }\n\n  public setEditView(isEdit: boolean): void {\n    this.isEdit = isEdit;\n    if (this.isEdit) {\n      this.addClass(classes.edit!);\n    } else {\n      this.removeClass(classes.edit!);\n    }\n  }\n\n}\n\nfunction getBtn(name: string): BaseComponent {\n  return a({ className: classes['btn-round']},\n    img({className: classes.img, src: `img/${name}.png`, alt: name, width: 15, height: 15}))\n}\n","import type { Message, User } from '@/app/utils/type.ts';\nimport TXT from '@/app/utils/language.ts';\nimport { BaseComponent } from '../../base-components.ts';\nimport MessageComponent from '../message/message.ts';\nimport classes from './dialog.module.scss';\nimport { p } from '../../tags.ts';\n\n\ntype messageCallback = (message: Message) => void;\n\nexport default class Dialog extends BaseComponent {\n  private messages: MessageComponent[] = [];\n\n  private emptyDialog: BaseComponent;\n\n  private isNewMessage = false;\n\n  private separator: BaseComponent;\n\n  private isAutoScroll = false;\n\n  private deleteMessageHandler: messageCallback;\n\n  private editMessageHandler: messageCallback;\n\n  constructor(deleteMessageHandler: messageCallback, editMessageHandler: messageCallback){\n    super({ tag: 'div', className: classes.dialog });\n    this.deleteMessageHandler = deleteMessageHandler;\n    this.editMessageHandler = editMessageHandler;\n    this.emptyDialog = p(classes.emptyDialog!, TXT.messageEmptyChat);\n    this.separator = p(classes.new!, TXT.messageNewMessage);\n    this.append(this.emptyDialog);\n  }\n\n  public addMessage(message: Message, isMy: boolean, user: User): void {\n    const oldMsg = this.messages.find(msg => msg.getMessage().id === message.id);\n    if (!oldMsg) {\n      const messageEl = new MessageComponent(message, isMy, user, this.deleteMessageHandler, this.editMessageHandler);\n      this.messages.push(messageEl);\n      this.append(messageEl);\n      this.scrollMessage();\n    }\n  }\n\n  public updateMessage(message: Message): void {\n    const messageEl = this.messages.find(el => el.getMessage().id === message.id);\n    if (messageEl) {\n      messageEl.updateMessage(message);\n    }\n  }\n\n  public insertSeparator(): void {\n    if (!this.isNewMessage) {\n      this.isNewMessage = true;\n      this.append(this.separator);\n      this.scrollMessage();\n    }\n  }\n\n  public deleteSeparator(): void {\n    if (this.isNewMessage) {\n      this.isNewMessage = false;\n      this.getElement().removeChild(this.separator.getElement());\n    }\n  }\n\n  public scrollMessage(): void {\n    this.isAutoScroll = true;\n    if (this.isNewMessage) {\n      this.separator.getElement().scrollIntoView({ behavior: 'smooth' });\n    } else {\n      const lastMessage = this.messages[this.messages.length - 1];\n      if (lastMessage) {\n        lastMessage.getElement().scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n    requestAnimationFrame(() => {\n      setTimeout(() => {\n        this.isAutoScroll = false;\n      }, 2000);\n    });\n  }\n\n  public getIsAutoScroll(): boolean {\n    return this.isAutoScroll;\n  }\n\n  public showLastMessage(): void {\n    this.isAutoScroll = true;\n    if (this.isNewMessage) {\n      this.getElement().scrollTop = this.separator.getElement().offsetTop - this.getElement().offsetHeight + this.separator.getElement().offsetHeight;\n    } else {\n      const lastMessage = this.messages[this.messages.length - 1];\n      if (lastMessage) {\n        this.getElement().scrollTop = lastMessage.getElement().offsetTop;\n      }\n    }\n\n    setTimeout(() => {\n      this.isAutoScroll = false;\n    }, 2000);\n\n  }\n\n  public deleteMessage(message: Message): void {\n    this.isAutoScroll = true;\n    const messageEl = this.messages.find(el => el.getMessage().id === message.id);\n    if (messageEl) {\n      this.messages = this.messages.filter(el => el !== messageEl);\n      this.removeChild(messageEl);\n      messageEl.destroy();\n    }\n    setTimeout(() => {\n      this.isAutoScroll = false;\n    }, 2000);\n  }\n\n  public deleteEditStatus(): void {\n    this.messages.forEach(el => el.setEditView(false));\n  }\n\n  public setEditStatus(message: Message, status: boolean): void {\n    const messageEl = this.messages.find(el => el.getMessage().id === message.id);\n    if (messageEl) {\n      messageEl.setEditView(status);\n    }\n  }\n}\n","import type { Message } from '@/app/utils/type.ts';\nimport { BaseComponent } from '../../base-components.ts';\nimport classes from './form.module.scss';\n\ntype submitCallback = (message: string) => void;\ntype editCallback = (text: string, message: Message) => void;\ntype closeCallback = (message: Message) => void;\nexport default class MessageForm extends BaseComponent {\n  private text: BaseComponent;\n\n  private button: BaseComponent;\n\n  private btnClose: BaseComponent;\n\n  private editMessage: Message | null = null;\n\n  private submitCallback: submitCallback;\n\n  private editCallback: editCallback;\n\n  private closeCallback: closeCallback;\n\n  constructor(submitCallback: submitCallback, editCallback: editCallback, closeCallback: closeCallback){\n    super({ tag: 'form', className: classes.form });\n    this.submitCallback = submitCallback;\n    this.editCallback = editCallback;\n    this.closeCallback = closeCallback;\n    this.text = new BaseComponent({ tag: 'input', className: classes.input });\n    this.button = new BaseComponent({ tag: 'button', className: classes.button });\n    this.btnClose = new BaseComponent({ tag: 'button', className: `${classes.btnClose} ${classes.hide}` });\n    this.appendChild([this.text, this.button, this.btnClose]);\n    this.addListener('submit', this.onSubmit);\n    this.button.addListener('submit', this.onSubmit);\n    this.btnClose.addListener('click', this.onClose);\n  }\n\n  public setEditMessage(message: Message): void {\n    this.editMessage = message;\n    this.btnClose.removeClass(classes.hide!);\n    this.text.setValue(message.text);\n  }\n\n  public deleteMessageHandler(message: Message): void {\n    if (message && this.editMessage === message) {\n      this.onClose();\n    }\n  }\n\n  private onSubmit = (event: Event): void => {\n    event.preventDefault();\n    const message = this.text.getValue();\n    if (message) {\n      this.text.setValue('');\n      if (this.editMessage) {\n        if (this.editMessage.text !== message) {\n          this.editCallback(message, this.editMessage);\n        }\n        this.onClose();\n      } else {\n        this.submitCallback(message);\n      }\n    }\n  }\n\n  private onClose = (): void => {\n    if (this.editMessage) {\n      const message = this.editMessage;\n      this.editMessage = null;\n      this.text.setValue('');\n      this.btnClose.addClass(classes.hide!);\n      this.closeCallback(message);\n    }\n  }\n}\n","import type { Message, User } from \"@/app/utils/type.ts\";\nimport type Controller from \"@/app/controller/controller.ts\";\nimport { BaseComponent } from \"../base-components.ts\";\nimport classes from \"./chat.module.scss\";\nimport ChatHead from \"./header/header.ts\";\nimport Dialog from \"./dialog/dialog.ts\";\nimport MessageForm from \"./form/form.ts\";\n\nexport default class Chat extends BaseComponent{\n  private user: User;\n\n  private head: ChatHead;\n\n  private dialog: Dialog;\n\n  private form: MessageForm;\n\n  private controller: Controller;\n\n\n  constructor(user: User, controller: Controller) {\n    super({ tag: 'div', className: classes.chat });\n    this.user = user;\n    this.controller = controller;\n    this.head = new ChatHead(this.user);\n    this.dialog = new Dialog(this.deleteMessageHandler, this.editMessageHandler);\n    this.form = new MessageForm(this.submitHandler, this.editSubmitHandler, this.editCloseHandler);\n    this.appendChild([this.head, this.dialog, this.form]);\n    this.dialog.addListener('click', this.onDialogClick);\n    this.dialog.addListener('scroll', this.onDialogScroll);\n  }\n\n  public getUser(): User {\n    return this.user;\n  }\n\n  public updateStatus(status: boolean): void {\n    this.head.updateStatus(status);\n  }\n\n  public addMessage(message: Message): void {\n    this.dialog.addMessage(message, message.from !== this.user.login, this.user);\n  }\n\n  public insertSeparator(): void {\n    this.dialog.insertSeparator();\n  }\n\n  public deleteSeparator(): void {\n    this.dialog.deleteSeparator();\n  }\n\n  public updateMessage(message: Message): void {\n    this.dialog.updateMessage(message);\n  }\n\n  public scrollMessage(visual = true): void {\n    if (visual) {\n      this.dialog.scrollMessage();\n    } else {\n      this.dialog.showLastMessage();\n    }\n  };\n\n  private submitHandler = (message: string): void => {\n    this.controller.ctrMessage.readAll(this.user);\n    this.controller.ctrMessage.sendMessage(this.user, message);\n  }\n\n  private onDialogClick = (): void => {\n    this.controller.ctrMessage.readAll(this.user);\n  }\n\n  private onDialogScroll = (): void => {\n    if (!this.dialog.getIsAutoScroll()) {\n      this.controller.ctrMessage.readAll(this.user);\n    }\n\n  }\n\n  public deleteMessage(message: Message): void {\n    this.dialog.deleteMessage(message);\n  }\n\n  private deleteMessageHandler = (message: Message): void => {\n    this.form.deleteMessageHandler(message);\n    this.controller.ctrMessage.deleteMessage(message);\n  }\n\n  private editMessageHandler = (message: Message): void => {\n    this.dialog.deleteEditStatus();\n    this.dialog.setEditStatus(message, true);\n    this.form.setEditMessage(message);\n  }\n\n  private editSubmitHandler = (text: string, message: Message): void => {\n    this.dialog.setEditStatus(message, false);\n    this.controller.ctrMessage.editMessage(message.id, text);\n  }\n\n  private editCloseHandler = (message: Message): void => {\n    this.dialog.setEditStatus(message, false);\n  }\n}\n","import TXT from \"@/app/utils/language.ts\";\nimport { Fields, type User } from \"@/app/utils/type.ts\";\nimport UserComponent from \"./user/user.ts\";\nimport Input from \"../input/input.ts\";\nimport { BaseComponent } from \"../base-components.ts\";\nimport classes from \"./users-list.module.scss\";\n\ntype UserClickCallback = (user: User) => void;\nexport default class UserListComponent extends BaseComponent{\n  private users: UserComponent[] = [];\n\n  private search: Input;\n\n  private userClickCallback: UserClickCallback;\n\n  constructor(userClickCallback: UserClickCallback) {\n    super({ tag: 'ul', className: classes['users-list'] });\n    this.userClickCallback = userClickCallback;\n    this.search = new Input({ id: Fields.search, type: 'text', placeholder: TXT.find, className: classes.search, validation: undefined });\n    this.search.addListener('input', this.onSearch);\n    this.append(this.search);\n    this.addListener('click', this.onUserClick);\n  }\n\n  public clearUsers(): void {\n    this.users.forEach(user => user.destroy())\n    this.users = [];\n    this.clearChild();\n  }\n\n  public updateUsers(users: User[]): void {\n\n    const currentUsers = [...this.users];\n    users.forEach(newUser => {\n\n      const currentItem = currentUsers.find(item => item.getUser().login === newUser.login);\n\n      if (currentItem && currentItem.getStatus() !== newUser.isLogined) {\n        currentItem.setOnline(newUser.isLogined);\n      }\n\n      if (!currentItem) {\n        const newUserItem = new UserComponent(newUser);\n        this.users.push(newUserItem);\n        this.append(newUserItem);\n      }\n    });\n\n    currentUsers.forEach(currentItem => {\n      if (!users.find(user => user.login === currentItem.getUser().login)) {\n        this.users = this.users.filter(item => item !== currentItem);\n        currentItem.destroy();\n      }\n    });\n\n    this.users.sort((a, b) => {\n      const userA = a.getUser();\n      const userB = b.getUser();\n\n      let result = 0;\n      if (userA.isLogined && !userB.isLogined) {\n        result = -1;\n      } else if (!userA.isLogined && userB.isLogined) {\n        result = 1;\n      } else if (userA.isLogined && userB.isLogined) {\n        result = userA.login.localeCompare(userB.login);\n      } else {\n        result = 0;\n      }\n      return result;\n    })\n\n    this.clearChild();\n    this.appendChild(this.users)\n  }\n\n  public setMessageCount(user: User, count: number): void {\n    const currentUser = this.users.find(item => item.getUser().login === user.login);\n    if (currentUser) {\n      currentUser.setMessageCount(count);\n    }\n  }\n\n  private onUserClick = (event: Event): void => {\n    const { target } = event;\n    if (target instanceof HTMLElement) {\n      const userElement = target.closest(`li`);\n      if (userElement) {\n        this.users.forEach(el => el.setActive(false));\n        const currentUser = this.users.find(item => item.getElement() === userElement);\n        currentUser?.setActive(true);\n        const user = currentUser?.getUser();\n        if (user) {\n          this.userClickCallback(user);\n        }\n      }\n    }\n  }\n\n  private onSearch = (event: Event): void => {\n    event.preventDefault();\n    const value = this.search.getValue();\n    this.users.forEach(user => {\n      const name = user.getUser().login;\n      if (name && name.toLowerCase().includes(value.toLowerCase())) {\n        user.show();\n      } else {\n        user.hide();\n      }\n    });\n  }\n\n}\n","import TXT from \"@/app/utils/language.ts\";\nimport { type Message, type User } from \"@/app/utils/type.ts\";\nimport type Store from \"@/app/store/store.ts\";\nimport type Controller from \"@/app/controller/controller.ts\";\nimport Chat from \"@/app/components/chat/chat.ts\";\nimport { aside, article, p } from \"@/app/components/tags.ts\";\nimport { BaseComponent } from \"@/app/components/base-components.ts\";\nimport UserListComponent from \"@/app/components/users-list/users-list.ts\";\nimport classes from \"./chat.module.scss\";\n\n\nexport default class ChatPage extends BaseComponent{\n  private userList: UserListComponent;\n\n  private chats: Chat[] = [];\n\n  private chatContainer: BaseComponent;\n\n  private emptyChat: BaseComponent;\n\n  private store: Store;\n\n  private controller: Controller | null = null;\n\n  constructor(store: Store) {\n    super({ tag: 'section', className: classes.container });\n    this.store = store;\n\n    const userListWarp = aside({ className: classes.aside });\n    this.userList = new UserListComponent(this.onUserClick);\n    userListWarp.append(this.userList);\n    this.append(userListWarp);\n    this.chatContainer = article({ className: classes.article });\n    this.emptyChat = p(classes.emptyChat!, TXT.messageEmptyUser);\n    this.chatContainer.append(this.emptyChat);\n    this.append(this.chatContainer);\n  }\n\n  public setController(controller: Controller): boolean {\n    let result = false;\n    if (controller) {\n      this.controller = controller;\n      result = true;\n    }\n    return result;\n\n  }\n\n  public updateUsers(users: User[]): void {\n    this.userList.updateUsers(users);\n    users.forEach(user => {\n      const chat = this.chats.find(el => el.getUser().login === user.login);\n      if (chat) {\n        chat.updateStatus(user.isLogined);\n      }\n    });\n  }\n\n  public addMessageToDialog(message: Message): void {\n    if (message && message.from) {\n      const user = this.store.getUserFromMessage(message);\n      if (user) {\n        const chat = this.getUserChat(user);\n        if (chat) {\n          this.userList.setMessageCount(user, this.store.needReadMessage(user));\n          if (!message.status.isReaded && !this.store.isMyMessage(message)) {\n            chat.insertSeparator();\n          }\n          chat.addMessage(message);\n        }\n      }\n    }\n  }\n\n  public afterLogout(): void {\n    this.chats.forEach(chat => chat.destroy());\n    this.userList.clearUsers();\n    this.chats = [];\n    this.chatContainer.clear();\n    this.chatContainer.append(this.emptyChat);\n  }\n\n  public updateMessage(message: Message): void {\n    if (message && message.id) {\n      const chat = this.chats.find(el => el.getUser().login === message.from || el.getUser().login === message.to);\n      if (chat) {\n\n        chat.updateMessage(message);\n        const user = this.store.getUserFromMessage(message);\n        if (user) {\n          const needRead = this.store.needReadMessage(user);\n          this.userList.setMessageCount(user, needRead);\n          if (!needRead) {\n            chat.deleteSeparator();\n          }\n        }\n\n      }\n    }\n  }\n\n  public deleteMessage(message: Message): void {\n    const user = this.store.getUserFromMessage(message);\n    if (user) {\n      const needRead = this.store.needReadMessage(user);\n      this.userList.setMessageCount(user, needRead);\n      const chat = this.getUserChat(user);\n      if (chat) {\n        chat.deleteMessage(message);\n        if (!needRead) {\n          chat.deleteSeparator();\n        }\n      }\n    }\n\n  }\n\n  private onUserClick = (user: User): void => {\n    this.chatContainer.clear();\n    const userChat = this.getUserChat(user);\n    if (userChat) {\n      this.chatContainer.append(userChat);\n      userChat.scrollMessage(false);\n    }\n  }\n\n  private getUserChat(user: User): Chat | undefined {\n    let userChat = this.chats.find(chat => chat.getUser().login === user.login);\n    if (!userChat && this.controller) {\n      userChat = new Chat(user, this.controller);\n      const messages = this.store.getUserMessages(user);\n      messages.forEach(message => {\n        if (userChat) {\n\n          if (!message.status.isReaded && !this.store.isMyMessage(message)) {\n            userChat.insertSeparator();\n          }\n          userChat.addMessage(message);\n\n        }\n      });\n      this.userList.setMessageCount(user, this.store.needReadMessage(user));\n      this.chats.push(userChat);\n    }\n    return userChat;\n  }\n\n}\n","\nimport TXT from \"@/app/utils/language.ts\";\nimport { BaseComponent } from \"@/app/components/base-components.ts\";\nimport { div, h1, p } from \"@/app/components/tags.ts\";\nimport classes from \"./info.module.scss\";\n\nexport default class Info extends BaseComponent {\n\n  constructor() {\n    super({ tag: 'div', className: classes.pageWrapper });\n\n    const modal = div({className: classes.welcomePage },\n    div({ className: classes.wrapper },\n      h1(classes.tittle!, TXT.infoTittle),\n      p(classes.description!, TXT.infoDescription),\n      ));\n\n    this.appendChild([modal])\n  }\n\n}\n","import { BaseComponent } from '../../base-components.ts';\nimport type AlertStack from '../alert-stack.ts';\nimport { p } from '../../tags.ts';\nimport Button from '../../button/button.ts';\nimport classes from './alert.module.scss';\n\nconst TIME_SHOW = 3000;\nexport default class AlertComponent extends BaseComponent {\n  private closeBtn: BaseComponent;\n\n  private alertStack: AlertStack;\n\n  private timeout: NodeJS.Timeout | null = null;\n\n  constructor(alertStack: AlertStack, message: string) {\n    super({ tag: 'div', className: classes.alert });\n    this.alertStack = alertStack;\n    const text = p(classes.message!, message);\n    this.closeBtn = Button({ textContent: '', className: classes['btn-close'] });\n    this.closeBtn.addListener('click', this.onClose);\n\n    this.appendChild([text, this.closeBtn]);\n  }\n\n  public show(): void {\n    this.addClass(classes.show!);\n    this.alertStack.append(this);\n    this.timeout = setTimeout(this.onHide, TIME_SHOW);\n  }\n\n  private onHide = (): void => {\n    this.addClass(classes.close!);\n    this.timeout = setTimeout(this.onClose, 1000);\n  };\n\n  private onClose = (): void => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.destroy();\n  };\n}\n","import SRC from '@/app/utils/src.ts';\nimport { BaseComponent } from '../base-components.ts';\nimport { div, img, p } from '../tags.ts';\nimport classes from './spinner.module.scss';\n\nexport default class Spinner extends BaseComponent {\n  private text: BaseComponent;\n\n  constructor() {\n    super({ tag: 'div', className: `${classes.bg} ${classes.hide}` });\n    const modal = div({ className: classes.modal });\n    this.text = p(classes.msg!, '');\n    const spinner = img({ src: SRC.spinner, alt: SRC.spinnerAlt, className: classes.spinner, width: 40, height: 40 });\n    modal.appendChild([spinner, this.text])\n    this.append(modal);\n    document.body.appendChild(this.getElement())\n  }\n\n  public show(): void {\n    this.removeClass(classes.hide!);\n  }\n\n  public hide(): void {\n    this.addClass(classes.hide!);\n  }\n\n  public setMessage(text: string): void {\n    this.text.setText(text);\n  }\n}\n","import { AppError, type serverAnswerError, type serverAnswerSuccess } from './type.ts';\n\nexport function isSuccessAnswer(entity: unknown): entity is serverAnswerSuccess {\n  return Boolean(\n    typeof entity === 'object' &&\n      entity &&\n      'type' in entity &&\n      typeof entity.type === 'string' &&\n      entity.type !== AppError.ERROR.toString() &&\n      'id' in entity\n  );\n}\n\nexport function isErrorAnswer(entity: unknown): entity is serverAnswerError {\n  return Boolean(\n    typeof entity === 'object' &&\n      entity &&\n      'type' in entity &&\n      typeof entity.type === 'string' &&\n      entity.type === AppError.ERROR.toString() &&\n      'id' in entity\n  );\n}\n","import AlertComponent from '@/app/components/alert-stack/alert/alert.ts';\nimport TXT from '@/app/utils/language.ts';\nimport Spinner from '@/app/components/spinner/spinner.ts';\nimport { isErrorAnswer, isSuccessAnswer } from '@/app/utils/validation-response.ts';\nimport type AlertStack from '../../components/alert-stack/alert-stack.ts';\nimport type { Callback, ServerAnswer } from '../../utils/type.ts';\nimport type ServerResponse from './server-response.ts';\n\ntype reConnectCallback = () => boolean;\n\nconst TIME_UPDATE = 2000;\nexport default class Connection {\n  private readonly END_POINT = `ws://localhost:4000`;\n\n  private alertStack: AlertStack;\n\n  private response: ServerResponse;\n\n  private connectionWS: WebSocket;\n\n  private spinner: Spinner;\n\n  private reConnectCallback: reConnectCallback | null = null;\n\n  private closeConnectCallback: Callback | null = null;\n\n  private isConnectionLost = false;\n\n  constructor(alertStack: AlertStack, response: ServerResponse) {\n    this.alertStack = alertStack;\n    this.response = response;\n    this.connectionWS = new WebSocket(`${this.END_POINT}`);\n    this.spinner = new Spinner();\n    this.getNewConnection();\n  }\n\n  public sendMessage(message: ServerAnswer): void {\n    if (this.connectionWS && this.connectionWS.readyState === WebSocket.OPEN) {\n      this.connectionWS.send(JSON.stringify(message));\n    } else {\n      this.onClose();\n    }\n  }\n\n  public setReConnectCallback(callback: reConnectCallback): void {\n    this.reConnectCallback = callback;\n  }\n\n  public setCloseConnectCallback(callback: Callback): void {\n    this.closeConnectCallback = callback;\n  }\n\n  private getNewConnection(): void {\n    this.connectionWS.addEventListener('open', this.onOpen);\n    this.connectionWS.addEventListener('error', this.onError);\n  }\n\n  private onOpen = (): void => {\n    this.spinner.hide();\n    this.setListeners();\n    if (this.isConnectionLost && this.reConnectCallback) {\n      this.isConnectionLost = false;\n      this.reConnectCallback();\n    }\n  };\n\n  private onError = (event: Event): void => {\n    if (event instanceof ErrorEvent && event.error && typeof event.error === 'string') {\n      const alert = new AlertComponent(this.alertStack, event.error);\n      alert.show();\n      this.getNewConnection();\n    }\n  };\n\n  private setListeners(): void {\n    this.connectionWS.addEventListener('message', this.onMessage);\n    this.connectionWS.addEventListener('close', this.onClose);\n  }\n\n  private onMessage = (message: MessageEvent): void => {\n    if (typeof message.data === 'string') {\n      const response: unknown = JSON.parse(message.data);\n\n      if (isSuccessAnswer(response)) {\n        this.response.read(response);\n      } else if (isErrorAnswer(response)) {\n        const { error } = response.payload;\n        const alert = new AlertComponent(this.alertStack, error);\n        alert.show();\n      }\n    }\n  };\n\n  private onClose = (): void => {\n    this.spinner.setMessage(TXT.messageServerDisconnect);\n    this.spinner.show();\n    this.isConnectionLost = true;\n    if (this.closeConnectCallback) {\n      this.closeConnectCallback();\n    }\n    this.tryReconnect();\n  };\n\n  private tryReconnect(): void {\n    const interval = setInterval(() => {\n      if (this.connectionWS.readyState === WebSocket.CLOSED) {\n        this.connectionWS = new WebSocket(`${this.END_POINT}`);\n        this.getNewConnection();\n      } else {\n        clearInterval(interval);\n      }\n    }, TIME_UPDATE);\n  }\n}\n","import type Store from \"../store/store\";\nimport type AuthPage from \"../pages/auth/auth\";\nimport type { Auth, User } from \"../utils/type.ts\";\nimport { Navigation } from \"../utils/type.ts\";\nimport { navigateAfterLogin, navigateTo } from \"../api/router.ts\";\nimport type Header from \"../components/header/header.ts\";\nimport type ServerRequest from \"../api/server/server-request.ts\";\nimport type ChatPage from \"../pages/chat/chat.ts\";\n\nexport default class ControllerAuth {\n  private store: Store\n\n  private pageAuth: AuthPage;\n\n  private pageChat: ChatPage;\n\n  private request: ServerRequest;\n\n  private header: Header\n\n  constructor(store: Store, pageAuth: AuthPage, pageChat: ChatPage, header: Header, request: ServerRequest) {\n    this.store = store;\n    this.pageAuth = pageAuth;\n    this.pageChat = pageChat;\n    this.header = header;\n    this.request = request\n  }\n\n  public login(user: Auth): boolean {\n    let result = false;\n    if (user) {\n      this.store.setAuthInfo(user);\n      this.request.sendLogin(user);\n      result = true;\n    }\n    return result;\n  }\n\n  public reLogin = (): boolean => {\n    let result = false;\n    const user = this.store.getAuthInfo()\n    if (user) {\n      this.request.sendLogin(user);\n      result = true;\n    }\n    return result;\n  }\n\n  public responseLogin(user: User): boolean {\n    let result = false;\n    if (user.isLogined) {\n      this.store.login(user);\n      result = true;\n    }\n    return result;\n  }\n\n  public afterLogin(user: User): boolean {\n    navigateAfterLogin();\n    this.header.changeAuth(true, user);\n    this.request.sendGetActiveUsers();\n    this.request.sendGetInactiveUsers();\n    return true;\n  }\n\n  public startLogout(): boolean {\n    let result = false;\n    const authInfo = this.store.getAuthInfo();\n    const isAuth = this.store.isAuth();\n    if (isAuth && authInfo) {\n      this.request.sendLogout(authInfo);\n      result = true;\n    }\n    return result;\n  }\n\n  public responseLogout(user: User): boolean {\n    let result = false;\n    if (!user.isLogined) {\n      this.store.logout(user);\n      result = true;\n    }\n    return result;\n  }\n\n  public afterLogout(): boolean {\n    navigateTo(Navigation.auth);\n    this.pageAuth.resetForm();\n    this.header.changeAuth(false);\n    this.pageChat.afterLogout();\n\n    return true;\n  }\n\n  public closeConnection = (): void => {\n    this.store.lostConnection();\n    this.pageChat.afterLogout();\n  }\n\n}\n","import type Store from \"../store/store\";\nimport type ChatPage from \"../pages/chat/chat.ts\";\nimport type { User } from \"../utils/type.ts\";\n\nexport default class ControllerUser {\n  private store: Store\n\n  private pageChat: ChatPage\n\n  constructor(store: Store, pageChat: ChatPage) {\n    this.store = store;\n    this.pageChat = pageChat;\n  }\n\n  public responseUserLogin(user: User): boolean {\n    let result = false;\n    if (user.isLogined) {\n      this.store.userLogin(user);\n      this.pageChat.updateUsers(this.store.getUsersList());\n      result = true;\n    }\n    return result;\n  }\n\n  public responseUserLogout(user: User): boolean {\n    let result = false;\n    if (!user.isLogined) {\n      this.store.userLogout(user);\n      this.pageChat.updateUsers(this.store.getUsersList());\n      result = true;\n    }\n    return result;\n  }\n\n  public responseActiveUsers(users: User[]): boolean {\n    let result = false;\n    if (users) {\n      this.store.setActiveUsers(users);\n      this.pageChat.updateUsers(this.store.getUsersList());\n      result = true;\n    }\n    return result;\n  }\n\n  public responseInactiveUsers(users: User[]): boolean {\n    let result = false;\n    if (users) {\n      this.store.setInactiveUsers(users);\n      this.pageChat.updateUsers(this.store.getUsersList());\n      result = true;\n    }\n    return result;\n  }\n\n}","\nexport default function getNewId(): string {\n  return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, setSymbol);\n}\n\nfunction setSymbol(): string {\n  return Math.floor(Math.random() * 16).toString(16);\n}\n","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { UserActions } from \"@/app/utils/type.ts\";\nimport type { Auth, ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqLogin(user: Auth): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: UserActions.LOGIN,\n    payload: {\n      user\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { UserActions } from \"@/app/utils/type.ts\";\nimport type { Auth, ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqLogout(user: Auth): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: UserActions.LOGOUT,\n    payload: {\n      user\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { UserActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqUserActive(): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: UserActions.USER_ACTIVE,\n    payload: null,\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { UserActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqUserInactive(): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: UserActions.USER_INACTIVE,\n    payload: null,\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { MessageActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqMsgSend(user: string, text: string): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: MessageActions.MSG_SEND,\n    payload: {\n      message: {\n        to: user,\n        text,\n      }\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { MessageActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqMsgFromUser(login: string): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: MessageActions.MSG_FROM_USER,\n    payload: {\n      user: {\n        login,\n      }\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { MessageActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqMsgRead(id: string): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: MessageActions.MSG_READ,\n    payload: {\n      message: {\n        id,\n      }\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { MessageActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqMsgDelete(id: string): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: MessageActions.MSG_DELETE,\n    payload: {\n      message: {\n        id,\n      }\n    },\n  };\n}","import getNewId from \"@/app/utils/id-generator.ts\";\nimport { MessageActions } from \"@/app/utils/type.ts\";\nimport type { ServerAnswer } from \"@/app/utils/type\";\n\nexport default function rqMsgEdit(id: string, text: string): ServerAnswer{\n  return {\n    id: getNewId(),\n    type: MessageActions.MSG_EDIT,\n    payload: {\n      message: {\n        id,\n        text\n      }\n    },\n  };\n}","import type { Auth, ServerAnswer } from \"@/app/utils/type.ts\";\nimport type Connection from \"./connection.ts\";\nimport rqLogin from \"./request/auth/login.ts\";\nimport rqLogout from \"./request/auth/logout.ts\";\nimport rqUserActive from \"./request/user/active.ts\";\nimport rqUserInactive from \"./request/user/inactive.ts\";\nimport rqMsgSend from \"./request/message/send.ts\";\nimport rqMsgFromUser from \"./request/message/from-user.ts\";\nimport rqMsgRead from \"./request/message/read.ts\";\nimport rqMsgDelete from \"./request/message/delete.ts\";\nimport rqMsgEdit from \"./request/message/edit.ts\";\n\nexport default class ServerRequest {\n  private connection: Connection;\n\n  constructor(connection: Connection) {\n    this.connection = connection;\n  }\n  \n  public sendLogin(user: Auth): void {\n    this.sendRequest(rqLogin(user));\n  }\n  \n  public sendLogout(user: Auth): void {\n    this.sendRequest(rqLogout(user));\n  }\n  \n  public sendGetActiveUsers(): void {\n    this.sendRequest(rqUserActive());\n  }\n  \n  public sendGetInactiveUsers(): void {\n    this.sendRequest(rqUserInactive());\n  }\n\n  public sendMessage(user: string, text: string): void {\n    this.sendRequest(rqMsgSend(user, text));\n  }\n\n  public sendGetMessages(user: string): void {\n    this.sendRequest(rqMsgFromUser(user));\n  }\n\n  public sendRead(id: string): void {\n    this.sendRequest(rqMsgRead(id));\n  }\n  \n  public sendDelete(id: string): void {\n    this.sendRequest(rqMsgDelete(id));\n  }\n\n  public sendEdit(id: string, text: string): void {\n    this.sendRequest(rqMsgEdit(id, text));\n  }\n\n  private sendRequest(request: ServerAnswer): void {\n    this.connection.sendMessage(request);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.LOGIN;\n\nexport default function loginHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { user } = response.payload;\n  if (user) {\n    controller.ctrAuth.responseLogin(user);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.LOGOUT;\n\nexport default function logoutHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { user } = response.payload;\n  if (user) {\n    controller.ctrAuth.responseLogout(user);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.USER_ACTIVE;\n\nexport default function userActiveHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { users } = response.payload;\n  if (users) {\n    controller.ctrUser.responseActiveUsers(users);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.USER_INACTIVE;\n\nexport default function userInactiveHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { users } = response.payload;\n  if (users) {\n    controller.ctrUser.responseInactiveUsers(users);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.USER_EXTERNAL_LOGIN;\n\nexport default function userLoginHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  \n  if (response.type !== type) {\n    return;\n  }\n\n  const { user } = response.payload;\n  if (user) {\n    controller.ctrUser.responseUserLogin(user);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { UserActions } from \"@/app/utils/type.ts\";\n\nconst type = UserActions.USER_EXTERNAL_LOGOUT;\n\nexport default function userLogoutHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { user } = response.payload;\n  if (user) {\n    controller.ctrUser.responseUserLogout(user);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_SEND;\n\nexport default function sendMegHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { message } = response.payload;\n  if (message) {\n    controller.ctrMessage.responseSendMessage(message);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_FROM_USER;\n\nexport default function formUserHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { messages } = response.payload;\n  if (messages) {\n    controller.ctrMessage.responseUserMessages(messages);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_DELIVER;\n\nexport default function deliverHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { message } = response.payload;\n  if (message) {\n    controller.ctrMessage.responseDeliverMessage(message);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_READ;\n\nexport default function readHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { message } = response.payload;\n  if (message) {\n    controller.ctrMessage.responseReadMessage(message);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_DELETE;\n\nexport default function deleteHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { message } = response.payload;\n  if (message) {\n    controller.ctrMessage.responseDelete(message);\n  }\n}\n","import type Controller from \"@/app/controller/controller.ts\";\nimport type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport  { MessageActions } from \"@/app/utils/type.ts\";\n\nconst type = MessageActions.MSG_EDIT;\n\nexport default function editHdl(response: serverAnswerSuccess, controller: Controller): void {\n\n  if (response.type !== type) {\n    return;\n  }\n\n  const { message } = response.payload;\n  if (message) {\n    controller.ctrMessage.responseEditMessage(message);\n  }\n}\n","import type { serverAnswerSuccess } from \"@/app/utils/type.ts\";\nimport type Controller from \"../../controller/controller.ts\";\nimport loginHdl from \"./response/auth/login-handler.ts\";\nimport logoutHdl from \"./response/auth/logout-handler.ts\";\nimport userActiveHdl from \"./response/users/user-active-handler.ts\";\nimport userInactiveHdl from \"./response/users/user-inactive-handler.ts\";\nimport userLoginHdl from \"./response/users/user-login-handler.ts\";\nimport userLogoutHdl from \"./response/users/user-logout-handler.ts\";\nimport sendMegHdl from \"./response/message/msg-send-handler.ts\";\nimport formUserHdl from \"./response/message/msg-from-user-handler.ts\";\nimport deliverHdl from \"./response/message/msg-deliver-handler.ts\";\nimport readHdl from \"./response/message/msg-read-handler.ts\";\nimport deleteHdl from \"./response/message/msg-delete-handler.ts\";\nimport editHdl from \"./response/message/msg-edit-handler.ts\";\n\nexport default class ServerResponse {\n  private controller: Controller;\n\n  constructor(controller: Controller) {\n    this.controller = controller;\n  }\n\n  public read(response: serverAnswerSuccess): void {\n    loginHdl(response, this.controller);\n    logoutHdl(response, this.controller);\n    userActiveHdl(response, this.controller);\n    userInactiveHdl(response, this.controller);\n    userLoginHdl(response, this.controller);\n    userLogoutHdl(response, this.controller)\n    sendMegHdl(response, this.controller);\n    formUserHdl(response, this.controller);\n    deliverHdl(response, this.controller);\n    readHdl(response, this.controller);\n    deleteHdl(response, this.controller);\n    editHdl(response, this.controller);\n  }\n}","import type Store from \"../store/store\";\nimport type ChatPage from \"../pages/chat/chat.ts\";\nimport type { Message, User } from \"../utils/type.ts\";\nimport type ServerRequest from \"../api/server/server-request.ts\";\n\nexport default class ControllerMessage {\n  private store: Store\n\n  private pageChat: ChatPage;\n\n  private request: ServerRequest;\n\n  constructor(store: Store, pageChat: ChatPage, request: ServerRequest) {\n    this.store = store;\n    this.pageChat = pageChat;\n    this.request = request;\n  }\n\n  public sendMessage(user: User, message: string): boolean {\n    let result = false;\n    if (message && user) {\n      this.request.sendMessage(user.login, message);\n      result = true;\n    }\n    return result;\n  }\n\n  public responseSendMessage(message: Message): boolean {\n    let result = false;\n    if (message) {\n      this.store.setNewMessage(message);\n      this.pageChat.addMessageToDialog(message);\n      result = true;\n    }\n    return result;\n  }\n\n  public getUserMessages(users: User[]): boolean {\n    let result = false;\n    if (users) {\n      users.forEach(user => {\n        this.request.sendGetMessages(user.login);\n      });\n      result = true;\n    }\n    return result;\n  }\n\n  public responseUserMessages(messages: Message[]): boolean {\n    let result = false;\n    if (messages) {\n      messages.forEach(message => {\n        this.store.setNewMessage(message);\n        this.pageChat.addMessageToDialog(message);\n      });\n      result = true;\n    }\n    return result;\n  }\n\n  public responseDeliverMessage(message: Message): boolean {\n    let result = false;\n    if (message) {\n      const messageEl = this.store.setDeliverStatus(message.id);\n      if (messageEl) {\n        this.pageChat.updateMessage(messageEl);\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  public responseReadMessage(message: Message): boolean {\n    let result = false;\n    if (message) {\n      const messageEl = this.store.setReadStatus(message.id);\n      if (messageEl) {\n        this.pageChat.updateMessage(messageEl);\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  public readAll(user: User): boolean {\n    let result = false;\n    if (user) {\n      const messages = this.store.getMessagesToUser(user);\n      messages.forEach(message => {\n        if (!message.status.isReaded) {\n          this.request.sendRead(message.id);\n        }\n      });\n      result = true;\n    }\n    return result;\n  }\n\n  public deleteMessage(message: Message): boolean {\n    let result = false;\n    if (message) {\n      this.request.sendDelete(message.id);\n      result = true;\n    }\n    return result;\n  }\n\n  public responseDelete(message: Message): boolean {\n    let result = false;\n    if (message) {\n      const messageEl = this.store.deleteMessage(message.id);\n      if (messageEl) {\n        this.pageChat.deleteMessage(messageEl);\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  public editMessage(id: string, message: string): boolean {\n    let result = false;\n    if (id && message) {\n      this.request.sendEdit(id, message);\n      result = true;\n    }\n    return result;\n  }\n\n  public responseEditMessage(message: Message): boolean {\n    let result = false;\n    if (message) {\n      const messageEl = this.store.setEdit(message);\n      if (messageEl) {\n        this.pageChat.updateMessage(messageEl);\n        result = true;\n      }\n    }\n    return result;\n  }\n}","import type Store from \"../store/store\";\nimport type AuthPage from \"../pages/auth/auth\";\nimport type ChatPage from \"../pages/chat/chat.ts\";\nimport Connection from \"../api/server/connection.ts\";\nimport ControllerAuth from \"./controller-auth.ts\";\nimport ControllerUser from \"./controller-user.ts\";\nimport type Header from \"../components/header/header.ts\";\nimport type { BaseComponent } from \"../components/base-components.ts\";\nimport ServerRequest from \"../api/server/server-request.ts\";\nimport ServerResponse from \"../api/server/server-response.ts\";\nimport ControllerMessage from \"./controller-message.ts\";\n\nexport default class Controller {\n  private store: Store\n\n  private pageAuth: AuthPage;\n\n  private pageChat: ChatPage\n\n  private connection: Connection;\n\n  private request: ServerRequest;\n\n  private alertStack: BaseComponent;\n\n  private header: Header\n\n  private serverResponse: ServerResponse;\n\n  public ctrAuth: ControllerAuth;\n\n  public ctrUser: ControllerUser;\n\n  public ctrMessage: ControllerMessage;\n\n  constructor(store: Store, pageAuth: AuthPage, pageChat: ChatPage, alertStack: BaseComponent, header: Header) {\n    this.store = store;\n    this.pageAuth = pageAuth;\n    this.pageChat = pageChat;\n    this.alertStack = alertStack;\n    this.header = header;\n    this.serverResponse = new ServerResponse(this);\n    this.connection = new Connection(this.alertStack, this.serverResponse);\n    this.request = new ServerRequest(this.connection)\n    this.ctrAuth = new ControllerAuth(this.store, this.pageAuth, this.pageChat, this.header, this.request);\n    this.ctrUser = new ControllerUser(this.store, this.pageChat);\n    this.ctrMessage = new ControllerMessage(this.store, this.pageChat, this.request);\n    this.connection.setReConnectCallback(this.ctrAuth.reLogin);\n    this.connection.setCloseConnectCallback(this.ctrAuth.closeConnection);\n  }\n\n}\n","import type { Auth, Message, User } from \"../utils/type.ts\"\nimport type Controller from \"../controller/controller.ts\";\n\nconst version = '1.0.0';\nconst app = 'fun-chat'\nconst author = 'yulikk'\nconst storageKey = `${author}-${version}-${app}`;\nconst loginKey = 'login';\nconst passwordKey = 'password';\n\nexport default class Store {\n  private controller: Controller | null = null;\n\n  private user: User = {\n    login: '',\n    isLogined: false,\n  }\n\n  private authInfo: Auth = {\n    login: null,\n    password: null\n  };\n\n  private usersList: User[] = [];\n\n  private message: Message[] = [];\n\n  constructor() {\n    const login = sessionStorage.getItem(`${storageKey}-${loginKey}`);\n    const password = sessionStorage.getItem(`${storageKey}-${passwordKey}`);\n\n    if (login && password) {\n      this.authInfo.login = login;\n      this.authInfo.password = password;\n    }\n  }\n\n  public setController(controller: Controller): Controller {\n    this.controller = controller;\n    if (this.isAuth()) {\n      this.controller?.ctrAuth.reLogin();\n    }\n    return this.controller;\n  }\n\n  public setAuthInfo(auth: Auth): Auth {\n    if (auth.login && auth.password) {\n      this.authInfo = auth;\n      sessionStorage.setItem(`${storageKey}-${loginKey}`, auth.login);\n      sessionStorage.setItem(`${storageKey}-${passwordKey}`, auth.password);\n    }\n    return this.authInfo ;\n  }\n\n  public getAuthInfo(): Auth {\n    return this.authInfo;\n  }\n\n  public isAuth(): boolean {\n    return this.authInfo.login !== null && this.authInfo.password !== null;\n  }\n\n  public login(user: User): User {\n    if (user.login && user.isLogined) {\n      Object.assign(this.user, user);\n      if (this.controller) {\n        this.controller.ctrAuth.afterLogin(this.user);\n      }\n    }\n    return this.user;\n  }\n\n  public logout(user: User): User {\n    if (user.login === this.user.login) {\n      this.user.isLogined = false;\n      this.user.login = '';\n      this.authInfo.login = null;\n      this.authInfo.password = null;\n      sessionStorage.removeItem(`${storageKey}-${loginKey}`);\n      sessionStorage.removeItem(`${storageKey}-${passwordKey}`);\n      this.usersList = [];\n      this.message = [];\n      if (this.controller) {\n        this.controller.ctrAuth.afterLogout();\n      }\n    }\n    return this.user;\n  }\n\n  public lostConnection(): void {\n    this.message = [];\n    this.usersList = [];\n  }\n\n  public userLogin(user: User): User | undefined {\n    const userEl = this.usersList.find(el => el.login === user.login);\n    if (userEl) {\n      userEl.isLogined = true;\n    } else {\n      this.usersList.push(user);\n    }\n    this.usersSort();\n    return userEl;\n  }\n\n  public userLogout(user: User): User | undefined {\n    const userEl = this.usersList.find(el => el.login === user.login);\n    if (userEl) {\n      userEl.isLogined = false;\n    }\n    this.usersSort();\n    return userEl;\n  }\n\n  public getUser(): User | null {\n    let user = null\n    if (this.user.isLogined) {\n      user = this.user;\n    }\n    return user;\n  }\n\n  public usersSort(): void {\n    this.usersList.sort((a, b) => Number(b.isLogined) - Number(a.isLogined));\n  }\n\n  private updateUsersList(users: User[], filterCondition: (user: User) => boolean): User[] {\n    this.usersList = this.usersList.filter(filterCondition);\n    this.usersList.push(...users);\n    this.usersSort();\n    if (this.controller) {\n      this.controller.ctrMessage.getUserMessages(users);\n    }\n    return this.usersList;\n  }\n\n  public setActiveUsers(users: User[]): User[] {\n    const otherUsers = users.filter(user => user.login !== this.user.login);\n    return this.updateUsersList(otherUsers, user => !user.isLogined);\n  }\n\n  public setInactiveUsers(users: User[]): User[] {\n    return this.updateUsersList(users, user => user.isLogined);\n  }\n\n  public getUsersList(): User[] {\n    return this.usersList;\n  }\n\n  public setNewMessage(message: Message): Message {\n    this.message.push(message);\n    return message;\n  }\n\n  public getUserMessages(user: User): Message[] {\n    return this.message.filter(\n      message => message.from === user.login || message.to === user.login\n    );\n  }\n\n  public setDeliverStatus(id: string): Message | undefined {\n    const message = this.message.find(el => el.id === id);\n    if (message) {\n      message.status.isDelivered = true;\n    }\n    return message;\n  }\n\n  public setReadStatus(id: string): Message | undefined {\n    const message = this.message.find(el => el.id === id);\n    if (message) {\n      message.status.isReaded = true;\n    }\n    return message;\n  }\n\n  public updateMessage(message: Message): Message | undefined {\n    const messageEl = this.message.find(el => el.id === message.id);\n    if (messageEl) {\n      Object.assign(messageEl, message);\n    }\n    return messageEl;\n  }\n\n  public getUserFromMessage(message: Message): User | undefined {\n    const msgTo = this.getUserFromList(message.to);\n    const msgFrom = this.getUserFromList(message.from);\n    return msgTo || msgFrom;\n  }\n\n  public getMessagesToUser(user: User): Message[] {\n    return this.message.filter(message => message.to === this.user.login && message.from === user.login);\n  }\n\n  public isMyMessage(message: Message): boolean {\n    return message.from === this.user.login;\n  }\n\n  public needReadMessage(user: User): number {\n    return this.message.filter(\n      message => message.from === user.login && !message.status.isReaded\n    ).length;\n  }\n\n  public deleteMessage(id: string): Message | undefined {\n    const message = this.message.find(el => el.id === id);\n    if (message) {\n      this.message = this.message.filter(el => el.id !== id);\n    }\n    return message;\n  }\n\n  public getUserFromList(user: string): User | undefined {\n    return this.usersList.find(el => el.login === user);\n  }\n\n  public setEdit(message: Message): Message | undefined {\n    const messageEl = this.message.find(el => el.id === message.id);\n    if (messageEl) {\n      messageEl.text = message.text;\n      messageEl.status.isEdited = message.status.isEdited;\n    }\n    return messageEl;\n  }\n}\n","import SRC from \"@/app/utils/src.ts\";\nimport TXT from \"@/app/utils/language.ts\";\nimport { BaseComponent } from \"../base-components.ts\";\nimport { a, img, p } from \"../tags.ts\";\nimport classes from \"./footer.module.scss\";\n\nexport default class Footer extends BaseComponent {\n  constructor() {\n    super({ tag: 'footer', className: classes.footer });\n    this.appendChild([\n      a({ className: classes.link, href: SRC.gitHref, target: '_blank' },\n        img({ src: SRC.git, alt: SRC.gitAlt, className: classes.logoGit, width: 24, height: 24 }),\n      ),\n      a({ className: classes.link, href: SRC.rsHref, target: '_blank' },\n        img({ src: SRC.rs, alt: SRC.rsAlt, className: classes.logoRs, width: 24, height: 24 }),\n      ),\n      p(classes.linkText!, TXT.year)\n    ]);\n\n  }\n\n}\n","import \"modern-normalize/modern-normalize.css\";\nimport Header from \"./app/components/header/header.ts\";\nimport Page404 from \"./app/pages/404/404.ts\";\nimport AlertStack from \"./app/components/alert-stack/alert-stack.ts\";\nimport AuthPage from \"./app/pages/auth/auth.ts\";\nimport ChatPage from \"./app/pages/chat/chat.ts\";\nimport Info from \"./app/pages/info/info.ts\";\nimport Controller from \"./app/controller/controller.ts\";\nimport Store from \"./app/store/store.ts\";\nimport { Navigation } from \"./app/utils/type.ts\";\nimport { initializeRouter } from \"./app/api/router.ts\";\nimport type { BaseComponent } from \"./app/components/base-components.ts\";\nimport { div } from \"./app/components/tags.ts\";\nimport Footer from \"./app/components/footer/footer.ts\";\nimport classes from './app.module.scss';\n\nconst { body } = document;\nconst store = new Store();\nconst header = new Header();\nconst page404 = new Page404();\nconst pageInfo = new Info();\nconst alertStack = new AlertStack();\nconst pageAuth = new AuthPage();\nconst pageChat = new ChatPage(store);\nconst footer = new Footer();\n\nconst controller = new Controller(store, pageAuth, pageChat, alertStack, header);\npageAuth.setController(controller);\nstore.setController(controller);\nheader.setController(controller);\npageChat.setController(controller);\n\n\nconst pageContainer = div({ className: classes.app });\nbody.appendChild(header.getElement());\nbody.appendChild(pageContainer.getElement());\nbody.appendChild(alertStack.getElement());\nbody.appendChild(footer.getElement());\n\n\nfunction renderPage(page: Navigation): void {\n  switch (page) {\n    case Navigation.auth:\n      render(Navigation.auth, pageAuth)\n      break;\n    case Navigation.info:\n      render(Navigation.info, pageInfo)\n      break;\n    case Navigation.chat:\n      render(Navigation.chat, pageChat);\n      break;\n    default:\n      render(Navigation.page404, page404)\n      break;\n  }\n}\n\nfunction render(page: Navigation, pageComponent: BaseComponent): void {\n  pageContainer.clear();\n  header.setActivePage(page);\n  pageContainer.append(pageComponent);\n}\n\ninitializeRouter(renderPage, store, controller);\n\n\n"],"names":["text","Navigation","Fields","Status","UserActions","MessageActions","AppError","controller","store","aside","article","img","form","classes","item","user","tittle","logo","active","disable","message","errorMessage","type","error","modal","controls","info","msg","a","chat","alertStack","alert","pageAuth","pageChat","header","login","app"],"mappings":"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"}